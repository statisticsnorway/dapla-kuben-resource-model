/*
 * Shared Buckets
 * Schema for describing shared buckets in Dapla Kuben structure 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package no.ssb.dapla.kuben.v1;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import no.ssb.dapla.kuben.v1.SharedBucket;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The description of the SharedBuckets data structure. Information and configuration of buckets this team share.
 */
@JsonPropertyOrder({
  SharedBuckets.JSON_PROPERTY_VERSION,
  SharedBuckets.JSON_PROPERTY_KIND,
  SharedBuckets.JSON_PROPERTY_BUCKETS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-28T08:21:27.116798792Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class SharedBuckets {
  /**
   * The version of this specification
   */
  public enum VersionEnum {
    KUBEN_V1(String.valueOf("kuben/v1"));

    private String value;

    VersionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VersionEnum fromValue(String value) {
      for (VersionEnum b : VersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VERSION = "version";
  @jakarta.annotation.Nonnull
  private VersionEnum version;

  /**
   * Resource identifier.
   */
  public enum KindEnum {
    SHARED_BUCKETS(String.valueOf("SharedBuckets"));

    private String value;

    KindEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static KindEnum fromValue(String value) {
      for (KindEnum b : KindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_KIND = "kind";
  @jakarta.annotation.Nonnull
  private KindEnum kind;

  public static final String JSON_PROPERTY_BUCKETS = "buckets";
  @jakarta.annotation.Nonnull
  private List<SharedBucket> buckets = new ArrayList<>();

  public SharedBuckets() { 
  }

  public SharedBuckets version(@jakarta.annotation.Nonnull VersionEnum version) {
    this.version = version;
    return this;
  }

  /**
   * The version of this specification
   * @return version
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public VersionEnum getVersion() {
    return version;
  }


  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersion(@jakarta.annotation.Nonnull VersionEnum version) {
    this.version = version;
  }


  public SharedBuckets kind(@jakarta.annotation.Nonnull KindEnum kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Resource identifier.
   * @return kind
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_KIND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public KindEnum getKind() {
    return kind;
  }


  @JsonProperty(JSON_PROPERTY_KIND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setKind(@jakarta.annotation.Nonnull KindEnum kind) {
    this.kind = kind;
  }


  public SharedBuckets buckets(@jakarta.annotation.Nonnull List<SharedBucket> buckets) {
    this.buckets = buckets;
    return this;
  }

  public SharedBuckets addBucketsItem(SharedBucket bucketsItem) {
    if (this.buckets == null) {
      this.buckets = new ArrayList<>();
    }
    this.buckets.add(bucketsItem);
    return this;
  }

  /**
   * List of shared bucket configurations.
   * @return buckets
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BUCKETS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<SharedBucket> getBuckets() {
    return buckets;
  }


  @JsonProperty(JSON_PROPERTY_BUCKETS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBuckets(@jakarta.annotation.Nonnull List<SharedBucket> buckets) {
    this.buckets = buckets;
  }


  /**
   * Return true if this SharedBuckets object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SharedBuckets sharedBuckets = (SharedBuckets) o;
    return Objects.equals(this.version, sharedBuckets.version) &&
        Objects.equals(this.kind, sharedBuckets.kind) &&
        Objects.equals(this.buckets, sharedBuckets.buckets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, kind, buckets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SharedBuckets {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    buckets: ").append(toIndentedString(buckets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

